mod print {
    #(no-mangle)
    fn printf(i8* fmt, ...) -> i32;

    fn print(i8* str) {
        printf(str);
        return;
    }

    fn println(i8* str) {
        printf(str);
        printf("\n");
        return;
    }

    fn print_i32(i32 num) {
        printf("%d", num);
        return;
    }

    fn print_i64(i64 num) {
        printf("%d", num);
        return;
    }

    fn print_float(f32 num) {
        printf("%f", num);
        return;
    }

    fn print_double(f64 num) {
        printf("%lf", num);
        return;
    }

    fn print_addr(i8* addr) {
        printf("%p", addr);
        return;
    }
}

mod alloc {
    #(no-mangle)
    fn malloc(i64 size) -> i8*;
    #(no-mangle)
    fn free(i8* ptr);

    fn alloc(i64 size) -> i8* {
        return malloc(size);
    }

    fn dealloc(i8* ptr) {
        free(ptr);
        return;
    }
}

fn main() -> i32 {
    let i32* a = self::alloc::alloc(sizeof(i32)) as i32*;
    *a = 0;
    let i32 r = *a;
    self::alloc::dealloc(a as i8*);
    self::print::print_i32(r);
    self::print::println("");
    return r;
}



